{"ast":null,"code":"var _jsxFileName = \"/Users/mt/react/simple-project/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState, useEffect } from 'react';\n// import UserBox from './UserBox';\nimport styles from './User.module.css';\nimport TitlesList from './TitlesList';\nimport Header from './Header';\nimport MainNote from './MainNote';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInfo, setUserInfo] = useState(() => JSON.parse(localStorage.getItem('notes')) || [{\n    id: 4,\n    title: 'Go to gym',\n    body: 'do legs workout'\n  }, {\n    id: 3,\n    title: 'Holiday',\n    body: 'withdraw holiday money'\n  }, {\n    id: 2,\n    title: 'Study React',\n    body: 'do udemy course'\n  }, {\n    id: 1,\n    title: 'create portfolio',\n    body: 'add all projects to portfolio'\n  }]);\n  const [query, setQuery] = useState('');\n  const [selectedNoteId, setSelectedNoteId] = useState();\n\n  // useEffect?????\n  // const reOrderList = () => {\n  //   let currentNoteId = selectedNoteId\n  //   // then listen to a click event (or useEffect) and..\n  //   let newNoteId = selectedNoteId\n  //   // userInfo set\n  //   // dip into localStorage and replace each value individually\n\n  // }\n\n  console.log(userInfo);\n  useEffect(() => {\n    localStorage.setItem('notes', JSON.stringify(userInfo));\n  }, [userInfo]);\n\n  // filtered users list\n  const filteredUsers = userInfo.filter(item => {\n    return item['title'].toLowerCase().indexOf(query.toLowerCase()) !== -1;\n  });\n\n  // When adding a new item to top of the list, the id will break if if it's trying to take the last item from the array\n  const finalUserInfo = info => {\n    setUserInfo(oldUserInfo => {\n      return [\n      //...oldUserInfo,\n      {\n        id: userInfo.length > 0 ? userInfo[0].id + 1 : 1,\n        title: info.body.split('\\n')[0],\n        body: info.body\n      }, ...oldUserInfo];\n    });\n  };\n  const removePerson = user => {\n    // console.log(user);\n    setUserInfo(oldFilteredUsers => {\n      const updatedUsers = oldFilteredUsers.filter(person => {\n        return person.id !== user.id;\n      });\n      return updatedUsers;\n    });\n  };\n  const onModification = (mod, newInput) => {\n    // console.log(mod);\n    // This works\n    // setUserInfo((oldUserInfo) => {\n    //   const updatedInfo = oldUserInfo.map((oldItem) => {\n    //     return oldItem.id === mod.id ? { ...oldItem, title: newInput.split('\\n')[0], body: newInput } : oldItem\n    //   })\n    //   return updatedInfo\n    // })\n\n    setUserInfo(oldNotes => {\n      const updatedArray = [];\n      for (let i = 0; i < oldNotes.length; i++) {\n        const oldNote = oldNotes[i];\n      }\n      oldNotes.forEach(oldNote => {\n        if (oldNote.id === mod.id) {\n          updatedArray = [...oldNotes];\n          updatedArray.unshift({\n            ...mod,\n            title: newInput.split('\\n')[0],\n            body: newInput\n          });\n        } else {\n          updatedArray.push(oldNote);\n        }\n      });\n      return updatedArray;\n    });\n  };\n  const noteClicked = note => {\n    // console.log(noteClicked);\n    setSelectedNoteId(note.id);\n  };\n  const resetMemo = toReset => {\n    // console.log(toReset);\n    setSelectedNoteId(toReset.id);\n  };\n\n  // to find the object with the note id\n  const noteToDisplay = useMemo(() => {\n    return userInfo.find(oneNote => {\n      return selectedNoteId === oneNote.id;\n    });\n  }, [selectedNoteId, userInfo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      query: query,\n      setQuery: setQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles['card-container'],\n      children: [/*#__PURE__*/_jsxDEV(TitlesList /*reOrder={reOrder}*/, {\n        noteClicked: noteClicked,\n        userData: userInfo,\n        filteredUsers: filteredUsers,\n        onModification: onModification,\n        onRemovePerson: removePerson\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MainNote, {\n        resetMemo: resetMemo,\n        selectedNote: noteToDisplay,\n        userData: userInfo,\n        filteredUsers: filteredUsers,\n        onModification: onModification,\n        onRemovePerson: removePerson,\n        finalUserInfo: finalUserInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Q8qREhDdIsUhUnXuu6Jy2JD0KLY=\");\n_c = App;\nexport default App;\n\n// when a note is open, have that selectednoteID\n// make an 'oldnote' and 'newnoteid' variable\n// when a new note is clicked, let it swap the id's\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useMemo","useState","useEffect","styles","TitlesList","Header","MainNote","jsxDEV","_jsxDEV","App","_s","userInfo","setUserInfo","JSON","parse","localStorage","getItem","id","title","body","query","setQuery","selectedNoteId","setSelectedNoteId","console","log","setItem","stringify","filteredUsers","filter","item","toLowerCase","indexOf","finalUserInfo","info","oldUserInfo","length","split","removePerson","user","oldFilteredUsers","updatedUsers","person","onModification","mod","newInput","oldNotes","updatedArray","i","oldNote","forEach","unshift","push","noteClicked","note","resetMemo","toReset","noteToDisplay","find","oneNote","className","children","fileName","_jsxFileName","lineNumber","columnNumber","userData","onRemovePerson","selectedNote","_c","$RefreshReg$"],"sources":["/Users/mt/react/simple-project/src/App.js"],"sourcesContent":["import React, { useMemo, useState, useEffect } from 'react';\n// import UserBox from './UserBox';\nimport styles from './User.module.css'\nimport TitlesList from './TitlesList';\nimport Header from './Header'\nimport MainNote from './MainNote';\n\nfunction App() {\n\n  const [userInfo, setUserInfo] = useState(\n    () => JSON.parse(localStorage.getItem('notes')) ||\n    [\n      {id: 4, title: 'Go to gym', body: 'do legs workout'},\n      {id: 3, title: 'Holiday', body: 'withdraw holiday money'},\n      {id: 2, title: 'Study React', body: 'do udemy course'},\n      {id: 1, title: 'create portfolio', body: 'add all projects to portfolio'}\n    ]\n  )\n\n  const [query, setQuery] = useState('')\n  const [selectedNoteId, setSelectedNoteId] = useState()\n\n  // useEffect?????\n  // const reOrderList = () => {\n  //   let currentNoteId = selectedNoteId\n  //   // then listen to a click event (or useEffect) and..\n  //   let newNoteId = selectedNoteId\n  //   // userInfo set\n  //   // dip into localStorage and replace each value individually\n\n  // }\n\n  console.log(userInfo);\n\n  useEffect(() => {\n    localStorage.setItem('notes', JSON.stringify(userInfo))\n  }, [userInfo])\n\n  // filtered users list\n  const filteredUsers = userInfo.filter((item) => {\n    return item['title'].toLowerCase().indexOf(query.toLowerCase()) !== -1\n  })\n\n  // When adding a new item to top of the list, the id will break if if it's trying to take the last item from the array\n  const finalUserInfo = (info) => {\n    setUserInfo((oldUserInfo) => {\n      return [\n        //...oldUserInfo,\n        {\n          id: userInfo.length > 0 ? userInfo[0].id + 1 : 1,\n          title: info.body.split('\\n')[0],\n          body: info.body\n        },\n        ...oldUserInfo\n      ]\n    })\n  }\n\n  const removePerson = (user) => {\n    // console.log(user);\n    setUserInfo((oldFilteredUsers) => {\n      const updatedUsers = oldFilteredUsers.filter((person) => {\n        return person.id !== user.id\n      })\n      return updatedUsers\n    })\n  }\n\n  const onModification = (mod, newInput) => {\n    // console.log(mod);\n    // This works\n    // setUserInfo((oldUserInfo) => {\n    //   const updatedInfo = oldUserInfo.map((oldItem) => {\n    //     return oldItem.id === mod.id ? { ...oldItem, title: newInput.split('\\n')[0], body: newInput } : oldItem\n    //   })\n    //   return updatedInfo\n    // })\n\n\n    setUserInfo((oldNotes) => {\n      const updatedArray = []\n      for (let i = 0; i < oldNotes.length ; i++) {\n        const oldNote = oldNotes[i]\n        \n      }\n      oldNotes.forEach((oldNote) => {\n        if (oldNote.id === mod.id) {\n          updatedArray = [...oldNotes]\n          updatedArray.unshift({...mod, title: newInput.split('\\n')[0], body: newInput})\n        } else {\n          updatedArray.push(oldNote)\n        }\n      })\n      return updatedArray\n    })\n\n  }\n\n  const noteClicked = (note) => {\n    // console.log(noteClicked);\n    setSelectedNoteId(note.id)\n  }\n\n  const resetMemo = (toReset) => {\n    // console.log(toReset);\n    setSelectedNoteId(toReset.id)\n  }\n\n\n// to find the object with the note id\n  const noteToDisplay = useMemo(() => {\n    return userInfo.find((oneNote) => {\n      return selectedNoteId === oneNote.id\n    })\n  }, [selectedNoteId, userInfo])\n\n  return (\n    <div className='main'>\n      {/* {console.log(userInfo)} */}\n      <Header query={query} setQuery={setQuery}/>\n      {/* <div className='search-add-container'>\n        <UserBox finalUserInfo={finalUserInfo}/>\n      </div> */}\n      <div className={styles['card-container']}>\n        <TitlesList /*reOrder={reOrder}*/ noteClicked={noteClicked} userData={userInfo} filteredUsers={filteredUsers} onModification={onModification} onRemovePerson={removePerson}/>\n        <MainNote resetMemo={resetMemo} selectedNote={noteToDisplay} userData={userInfo} filteredUsers={filteredUsers} onModification={onModification} onRemovePerson={removePerson} finalUserInfo={finalUserInfo} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// when a note is open, have that selectednoteID\n// make an 'oldnote' and 'newnoteid' variable\n// when a new note is clicked, let it swap the id's\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}