{"ast":null,"code":"var _jsxFileName = \"/Users/mt/react/simple-project/src/MainNote.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './MainNote.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainNote = _ref => {\n  _s();\n  let {\n    selectedNote,\n    resetMemo,\n    userData,\n    onModification,\n    finalUserInfo\n  } = _ref;\n  const [note, setNote] = useState({\n    id: '',\n    title: '',\n    body: ''\n  });\n\n  // when selectedNote changes (held in App.js), if selectedNote exists, make that 'note'\n  useEffect(() => {\n    if (selectedNote) setNote(selectedNote);\n  }, [selectedNote]);\n  const mainNoteChange = e => {\n    let newInput = e.target.value;\n    // setTimeout(() => {\n    //   console.log('500 ms down');\n    // }, 500)\n\n    // when users types in a note, set state of 'note' with new input\n    setNote(oldNote => ({\n      ...oldNote,\n      body: newInput\n    }));\n  };\n\n  //  on saving, if selectedNote exists, modify 'note', otherwise create it\n  const onSave = () => {\n    selectedNote ? onModification(note, note.body) : finalUserInfo(note);\n    setNote({\n      id: '',\n      title: '',\n      body: ''\n    });\n    resetMemo({\n      id: '',\n      title: ''\n    });\n  };\n  const wipeNote = () => {\n    console.log('state wiped');\n    setNote({\n      id: '',\n      title: '',\n      body: ''\n    });\n    resetMemo({\n      id: '',\n      title: '',\n      body: ''\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-note-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: wipeNote,\n      children: \"Create new\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: onSave,\n      children: selectedNote ? 'Update' : 'Create'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"textarea-note\",\n      onChange: mainNoteChange,\n      placeholder: \"Type your note here..\",\n      value: note.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(MainNote, \"7of2lw0wnBglKFqjbG1+05Da1TI=\");\n_c = MainNote;\nexport default MainNote;\n\n// Need to set the note default as the first on the list\n// If there's no notes existing,\n\n// if note exists, make selectedNote array[0] by default\n// else, selectedNote will be blank\nvar _c;\n$RefreshReg$(_c, \"MainNote\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MainNote","_ref","_s","selectedNote","resetMemo","userData","onModification","finalUserInfo","note","setNote","id","title","body","mainNoteChange","e","newInput","target","value","oldNote","onSave","wipeNote","console","log","className","children","type","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","_c","$RefreshReg$"],"sources":["/Users/mt/react/simple-project/src/MainNote.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './MainNote.css'\n\n\nconst MainNote = ({ selectedNote, resetMemo, userData, onModification, finalUserInfo }) => {\n\n  const [note, setNote] = useState({id: '', title: '', body: ''})\n\n  // when selectedNote changes (held in App.js), if selectedNote exists, make that 'note'\n  useEffect(() => {\n    if (selectedNote) setNote(selectedNote)\n  }, [selectedNote])\n\n  const mainNoteChange = (e) => {\n    let newInput = e.target.value;\n    // setTimeout(() => {\n    //   console.log('500 ms down');\n    // }, 500)\n\n    // when users types in a note, set state of 'note' with new input\n    setNote((oldNote) => ({ ...oldNote, body: newInput }))\n }\n\n//  on saving, if selectedNote exists, modify 'note', otherwise create it\n const onSave = () => {\n   selectedNote ? onModification(note, note.body) : finalUserInfo(note)\n   setNote({id: '', title: '', body: ''})\n   resetMemo({id: '', title: ''})\n }\n\n const wipeNote = () => {\n  console.log('state wiped');\n  setNote({id: '', title: '', body: ''})\n  resetMemo({id: '', title: '', body: ''})\n }\n\n  return (\n    <div className='main-note-area'>\n      <button type='button' onClick={wipeNote}>Create new</button>\n      <button type='button' onClick={onSave}>{selectedNote ? 'Update' : 'Create'}</button>\n      <textarea className='textarea-note' onChange={mainNoteChange} placeholder=\"Type your note here..\" value={note.body}></textarea>\n    </div>\n  )\n}\n\nexport default MainNote\n\n// Need to set the note default as the first on the list\n// If there's no notes existing,\n\n// if note exists, make selectedNote array[0] by default\n// else, selectedNote will be blank\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,gBAAgB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGvB,MAAMC,QAAQ,GAAGC,IAAA,IAA0E;EAAAC,EAAA;EAAA,IAAzE;IAAEC,YAAY;IAAEC,SAAS;IAAEC,QAAQ;IAAEC,cAAc;IAAEC;EAAc,CAAC,GAAAN,IAAA;EAEpF,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC;IAACc,EAAE,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAE,CAAC,CAAC;;EAE/D;EACAf,SAAS,CAAC,MAAM;IACd,IAAIM,YAAY,EAAEM,OAAO,CAACN,YAAY,CAAC;EACzC,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB,MAAMU,cAAc,GAAIC,CAAC,IAAK;IAC5B,IAAIC,QAAQ,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IAC7B;IACA;IACA;;IAEA;IACAR,OAAO,CAAES,OAAO,KAAM;MAAE,GAAGA,OAAO;MAAEN,IAAI,EAAEG;IAAS,CAAC,CAAC,CAAC;EACzD,CAAC;;EAEF;EACC,MAAMI,MAAM,GAAGA,CAAA,KAAM;IACnBhB,YAAY,GAAGG,cAAc,CAACE,IAAI,EAAEA,IAAI,CAACI,IAAI,CAAC,GAAGL,aAAa,CAACC,IAAI,CAAC;IACpEC,OAAO,CAAC;MAACC,EAAE,EAAE,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAE,CAAC,CAAC;IACtCR,SAAS,CAAC;MAACM,EAAE,EAAE,EAAE;MAAEC,KAAK,EAAE;IAAE,CAAC,CAAC;EAChC,CAAC;EAED,MAAMS,QAAQ,GAAGA,CAAA,KAAM;IACtBC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1Bb,OAAO,CAAC;MAACC,EAAE,EAAE,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAE,CAAC,CAAC;IACtCR,SAAS,CAAC;MAACM,EAAE,EAAE,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAE,CAAC,CAAC;EACzC,CAAC;EAEA,oBACEb,OAAA;IAAKwB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BzB,OAAA;MAAQ0B,IAAI,EAAC,QAAQ;MAACC,OAAO,EAAEN,QAAS;MAAAI,QAAA,EAAC;IAAU;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eAC5D/B,OAAA;MAAQ0B,IAAI,EAAC,QAAQ;MAACC,OAAO,EAAEP,MAAO;MAAAK,QAAA,EAAErB,YAAY,GAAG,QAAQ,GAAG;IAAQ;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAU,eACpF/B,OAAA;MAAUwB,SAAS,EAAC,eAAe;MAACQ,QAAQ,EAAElB,cAAe;MAACmB,WAAW,EAAC,uBAAuB;MAACf,KAAK,EAAET,IAAI,CAACI;IAAK;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAY;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC3H;AAEV,CAAC;AAAA5B,EAAA,CAvCKF,QAAQ;AAAAiC,EAAA,GAARjC,QAAQ;AAyCd,eAAeA,QAAQ;;AAEvB;AACA;;AAEA;AACA;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}